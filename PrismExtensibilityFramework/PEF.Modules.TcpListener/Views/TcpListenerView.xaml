<UserControl x:Class="PEF.Modules.TcpListener.Views.TcpListenerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:prism="http://prismlibrary.com/"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:common="clr-namespace:PEF.Common;assembly=PEF.Common"
             xmlns:converter="clr-namespace:PEF.Common.Converters;assembly=PEF.Common"
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/PEF.Common;component/Assets/Styles/Buttons.xaml"/>
                <ResourceDictionary Source="/PEF.Common;component/Assets/Styles/TextBlocks.xaml"/>
                <ResourceDictionary Source="/PEF.Common;component/Assets/Styles/TextBoxes.xaml"/>
                <ResourceDictionary>
                    <converter:ErrorContentConverter x:Key="ErrorConverter"/>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <prism:InvokeCommandAction Command="{Binding LoadedCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <GroupBox Header="{Binding Title}" FontSize="{DynamicResource HeaderFontSize}">
        <DockPanel>
            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="5,1">
                <StackPanel.Resources>
                    <!--<Style TargetType="TextBlock" BasedOn="{StaticResource H2TextBlock}"/>-->

                    <Style TargetType="Button" BasedOn="{StaticResource CommandButton}"/>

                    <Style TargetType="TextBox" x:Key="ValidationTextBox" BasedOn="{StaticResource H2TextBox}">
                        <Setter Property="Margin" Value="5,1"/>
                        <!-- Error in debug window -->
                        <!--<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>-->
                        <!-- Invalid -->
                        <!--<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent, Converter={StaticResource ErrorConverter}}"/>-->
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
                    </Style>

                    <!--<DataTemplate DataType="{x:Type ValidationError}">
                        <TextBlock Foreground="Red" Text="{Binding ErrorContent}"/>
                    </DataTemplate>-->
                </StackPanel.Resources>

                <TextBlock Text="ip:" Style="{StaticResource H2TextBlock}"/>

                <TextBox Style="{DynamicResource ValidationTextBox}" Width="120" x:Name="IpTextBox"
                     Text="{Binding ListenerAddress.Ip, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                <TextBlock Text="port:" Style="{StaticResource H2TextBlock}"/>

                <TextBox Style="{DynamicResource ValidationTextBox}" Width="80" x:Name="PortTextBox"
                     Text="{Binding ListenerAddress.Port, Mode=TwoWay, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                <Button VerticalAlignment="Center" Content="Start"
                    Command="{Binding TcpListenerExecuteCommand}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButton}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=IpTextBox, Path=(Validation.HasError)}" Value="false"/>
                                        <Condition Binding="{Binding ElementName=PortTextBox, Path=(Validation.HasError)}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </StackPanel>

            <TextBox Margin="5,1" IsReadOnly="True" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"/>
        </DockPanel>
    </GroupBox>
</UserControl>
